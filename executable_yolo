#!/bin/bash

set -euo pipefail

VERSION="0.1.0"

# Function to show help message
show_help() {
    cat <<EOF
YOLO - Run AI coding agents with appropriate bypass flags

Usage: yolo [OPTIONS] COMMAND [ARGS...]

Options:
  -w, --worktree    Create a git worktree before running the command
  -h, --help        Show this help message
  --version         Show version information
  --dry-run         Show the command that would be executed

Supported Commands:
  codex             Anthropic Code (adds --dangerously-bypass-approvals-and-sandbox)
  claude            Claude Code (adds --dangerously-skip-permissions)
  copilot           GitHub Copilot (adds --allow-all-tools --allow-all-paths)
  droid             Factory AI Droid (adds --skip-permissions-unsafe)
  amp               Sourcegraph Amp (adds --dangerously-allow-all)
  cursor-agent      Cursor Agent (adds --force)
  opencode          OpenCode (no extra flags)
  <other>           Any other command (adds --yolo)

Examples:
  yolo claude "Fix the bug in src/main.js"
  yolo -w droid "Refactor the authentication module"
  yolo codex --help
EOF
}

# Main script
WORKTREE=false
DRY_RUN=false
ARGS=()
while [[ $# -gt 0 ]]; do
    case "$1" in
        -w|--worktree)
            WORKTREE=true
            shift
            ;;
        -h|--help)
            show_help
            exit 0
            ;;
        --version)
            echo "$VERSION"
            exit 0
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        *)
            ARGS+=("$1")
            shift
            ;;
    esac
done

if [ ${#ARGS[@]} -eq 0 ]; then
    echo "Error: missing command argument"
    show_help
    exit 1
fi

COMMAND="${ARGS[0]}"
ARGS=("${ARGS[@]:1}")

if [ "$WORKTREE" = true ]; then
    if ! git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
        echo "Error: not a git repository"
        exit 1
    fi
    REPO_ROOT=$(git rev-parse --show-toplevel)
    AGENT="${COMMAND//\//-}"
    TIMESTAMP=$(date -u +%Y%m%d-%H%M%S)
    BRANCH_NAME="yolo/$AGENT/$TIMESTAMP"
    WORKTREE_PATH=".conductor/$AGENT-$TIMESTAMP"
    git -C "$REPO_ROOT" worktree add -b "$BRANCH_NAME" "$WORKTREE_PATH"
    cd "$REPO_ROOT/$WORKTREE_PATH"
fi

if ! command -v "$COMMAND" >/dev/null 2>&1; then
    echo "Warning: command not found: $COMMAND"
fi

FLAGS=()
AGENT_FLAG_VAR="YOLO_FLAGS_${COMMAND//-/_}"
AGENT_FLAG_VAR=${AGENT_FLAG_VAR//\//_}

if [ -n "${!AGENT_FLAG_VAR:-}" ]; then
    read -r -a FLAGS <<< "${!AGENT_FLAG_VAR}"
else
    case "$COMMAND" in
        codex)
            FLAGS+=(--dangerously-bypass-approvals-and-sandbox)
            ;;
        claude)
            FLAGS+=(--dangerously-skip-permissions)
            ;;
        copilot)
            FLAGS+=(--allow-all-tools --allow-all-paths)
            ;;
        droid)
            FLAGS+=(--skip-permissions-unsafe)
            ;;
        amp)
            FLAGS+=(--dangerously-allow-all)
            ;;
        cursor-agent)
            FLAGS+=(--force)
            ;;
        opencode)
            ;;
        *)
            FLAGS+=(--yolo)
            ;;
    esac
fi

if [ "${YOLO_DEBUG:-false}" = true ]; then
    echo "Executing: $COMMAND ${FLAGS[*]} ${ARGS[*]}"
fi

if [ "$DRY_RUN" = true ]; then
    echo "$COMMAND" "${FLAGS[@]}" "${ARGS[@]}"
    exit 0
fi

exec "$COMMAND" "${FLAGS[@]}" "${ARGS[@]}"