#!/bin/bash

# YOLO - Run AI coding agents with appropriate bypass flags
# Portable replacement for the Elvish yolo function
# Supports automatic worktree creation and per-agent flag mapping

set -e -u -o pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_color() {
    local color=$1
    shift
    printf "${color}%s${NC}\n" "$*" >&2
}

# Function to show usage
show_usage() {
    cat >&2 <<EOF
YOLO - Run AI coding agents with appropriate bypass flags

Usage: yolo [OPTIONS] COMMAND [ARGS...]

Options:
  -w, --worktree    Create a git worktree before running the command
  -h, --help        Show this help message
  --version         Show version information

Supported Commands:
  codex             Anthropic Code (adds --dangerously-bypass-approvals-and-sandbox)
  claude            Claude Code (adds --dangerously-skip-permissions)
  copilot           GitHub Copilot (adds --allow-all-tools --allow-all-paths)
  droid             Factory AI Droid (adds --skip-permissions-unsafe)
  amp               Sourcegraph Amp (adds --dangerously-allow-all)
  cursor-agent      Cursor Agent (adds --force)
  opencode          OpenCode AI (no additional flags)
  <other>           Any other command (adds --yolo)

Examples:
  yolo claude "Fix the bug in src/main.js"
  yolo -w droid "Refactor the authentication module"
  yolo codex --help

Environment Variables:
  YOLO_FLAGS_<agent>  Override flags for a specific agent (e.g., YOLO_FLAGS_claude)

EOF
}

# Function to show version
show_version() {
    echo "yolo version 1.0.0"
}

# Parse options
use_worktree=false
while [[ $# -gt 0 ]]; do
    case $1 in
        -w|--worktree)
            use_worktree=true
            shift
            ;;
        -h|--help)
            show_usage
            exit 0
            ;;
        --version)
            show_version
            exit 0
            ;;
        -*)
            print_color "$RED" "Unknown option: $1"
            show_usage
            exit 1
            ;;
        *)
            # First non-option argument is the command
            break
            ;;
    esac
done

# Check if command is provided
if [ $# -eq 0 ]; then
    print_color "$RED" "Error: missing command argument"
    show_usage
    exit 1
fi

cmd="$1"
shift
rest_args=("$@")

# If worktree mode is enabled, set up the worktree
if [ "$use_worktree" = true ]; then
    # Check if we're in a git repository
    if ! git rev-parse --git-dir >/dev/null 2>&1; then
        print_color "$RED" "Error: not in a git repository, cannot create worktree"
        exit 1
    fi

    # Get repository root to ensure .conductor is always at the top level
    repo_root=$(git rev-parse --show-toplevel)
    conductor_dir="$repo_root/.conductor"
    
    if [ ! -d "$conductor_dir" ]; then
        mkdir -p "$conductor_dir"
    fi

    # Generate branch name based on agent and timestamp
    timestamp=$(date +%Y%m%d-%H%M%S)
    branch_name="yolo/$cmd/$timestamp"
    worktree_path="$conductor_dir/$cmd-$timestamp"

    print_color "$BLUE" "Creating worktree at $worktree_path with branch $branch_name"

    # Create the worktree
    if ! git worktree add -b "$branch_name" "$worktree_path" 2>&1; then
        print_color "$RED" "Error: failed to create worktree"
        exit 1
    fi

    print_color "$BLUE" "Switching to worktree..."
    cd "$worktree_path" || exit 1
fi

# Map commands to their appropriate bypass flags
# Check for environment variable override first
env_var="YOLO_FLAGS_$cmd"
if [ -n "${!env_var:-}" ]; then
    print_color "$GREEN" "Running $cmd with custom flags: ${!env_var}"
    # shellcheck disable=SC2086
    exec "$cmd" ${!env_var} "${rest_args[@]}"
fi

case "$cmd" in
    codex)
        flags=(--dangerously-bypass-approvals-and-sandbox)
        print_color "$GREEN" "Running codex with ${flags[*]}"
        exec codex "${flags[@]}" "${rest_args[@]}"
        ;;
    claude)
        flags=(--dangerously-skip-permissions)
        print_color "$GREEN" "Running claude with ${flags[*]}"
        exec claude "${flags[@]}" "${rest_args[@]}"
        ;;
    copilot)
        flags=(--allow-all-tools --allow-all-paths)
        print_color "$GREEN" "Running copilot with ${flags[*]}"
        exec copilot "${flags[@]}" "${rest_args[@]}"
        ;;
    droid)
        flags=(--skip-permissions-unsafe)
        print_color "$GREEN" "Running droid with ${flags[*]}"
        exec droid "${flags[@]}" "${rest_args[@]}"
        ;;
    amp)
        flags=(--dangerously-allow-all)
        print_color "$GREEN" "Running amp with ${flags[*]}"
        exec amp "${flags[@]}" "${rest_args[@]}"
        ;;
    cursor-agent)
        flags=(--force)
        print_color "$GREEN" "Running cursor-agent with ${flags[*]}"
        exec cursor-agent "${flags[@]}" "${rest_args[@]}"
        ;;
    opencode)
        print_color "$GREEN" "Running opencode (no additional flags needed)"
        exec opencode "${rest_args[@]}"
        ;;
    *)
        # For all others, check if command exists and add --yolo
        if ! command -v "$cmd" >/dev/null 2>&1; then
            print_color "$RED" "Error: command '$cmd' not found"
            exit 1
        fi
        flags=(--yolo)
        print_color "$GREEN" "Running $cmd with ${flags[*]}"
        exec "$cmd" "${flags[@]}" "${rest_args[@]}"
        ;;
esac
